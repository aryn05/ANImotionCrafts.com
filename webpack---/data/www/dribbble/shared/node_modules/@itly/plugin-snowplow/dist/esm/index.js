var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
            __proto__: []
        }
        instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b)
                if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/* eslint-disable no-unused-vars, class-methods-use-this, import/no-unresolved */
import {
    RequestLoggerPlugin
} from '@itly/sdk';
/**
 * Snowplow Browser Plugin for Iteratively SDK
 */
var SnowplowPlugin = /** @class */ function(_super) {
    __extends(SnowplowPlugin, _super);

    function SnowplowPlugin(vendor, options) {
        var _this = _super.call(this, 'snowplow') || this;
        _this.vendor = vendor;
        _this.options = options;
        _this.toJsonStr = function(properties, contexts) {
            return "" + JSON.stringify(properties) + (contexts ? ", " + JSON.stringify(contexts) : '');
        };
        // create tag for trackers to send events to e.g. ':itly', ':itly;tracker2', ''
        _this.trackerNameFilter = _this.options.trackerNames && _this.options.trackerNames.length > 0 ? ":" + _this.options.trackerNames.join(';') : '';
        return _this;
    }
    Object.defineProperty(SnowplowPlugin.prototype, "snowplow", {
        get: function() {
            // eslint-disable-next-line no-restricted-globals
            var s = typeof self === 'object' && self.self === self && self;
            return s && s.snowplow;
        },
        enumerable: false,
        configurable: true
    });
    SnowplowPlugin.prototype.load = function(options) {
        _super.prototype.load.call(this, options);
        if (!this.snowplow) {
            // Snowplow (https://docs.snowplowanalytics.com/docs/collecting-data/collecting-from-own-applications/javascript-tracker/web-quick-start-guide/)
            // @ts-ignore
            // eslint-disable-next-line
            ;
            (function(p, l, o, w, i, n, g) {
                if (!p[i]) {
                    p.GlobalSnowplowNamespace = p.GlobalSnowplowNamespace || [];
                    p.GlobalSnowplowNamespace.push(i);
                    p[i] = function() {
                        (p[i].q = p[i].q || []).push(arguments);
                    };
                    p[i].q = p[i].q || [];
                    n = l.createElement(o);
                    g = l.getElementsByTagName(o)[0];
                    n.async = 1;
                    n.src = w;
                    g.parentNode.insertBefore(n, g);
                }
            })(window, document, "script", "//cdn.jsdelivr.net/gh/snowplow/sp-js-assets@2.17.3/sp.js", "snowplow");
            this.snowplow('newTracker', 'itly', this.options.url, this.options.config);
        }
    };
    SnowplowPlugin.prototype.identify = function(userId, properties) {
        this.snowplow("setUserId" + this.trackerNameFilter, userId);
    };
    SnowplowPlugin.prototype.page = function(userId, category, name, properties, options) {
        var _a = options !== null && options !== void 0 ? options : {},
            callback = _a.callback,
            contexts = _a.contexts;
        var responseLogger = this.logger.logRequest('page', userId + ", " + category + ", " + name + ", " + this.toJsonStr(properties, contexts));
        this.snowplow("trackPageView" + this.trackerNameFilter, name, undefined, contexts, undefined, this.wrapCallback(responseLogger, callback));
    };
    SnowplowPlugin.prototype.track = function(userId, _a, options) {
        var name = _a.name,
            properties = _a.properties,
            version = _a.version;
        var schemaVer = version && version.replace(/\./g, '-');
        var _b = options !== null && options !== void 0 ? options : {},
            callback = _b.callback,
            contexts = _b.contexts;
        var responseLogger = this.logger.logRequest('track', userId + ", " + name + ", " + this.toJsonStr(properties, contexts));
        this.snowplow("trackSelfDescribingEvent" + this.trackerNameFilter, {
            schema: "iglu:" + this.vendor + "/" + name + "/jsonschema/" + schemaVer,
            data: properties || {}
        }, contexts, undefined, this.wrapCallback(responseLogger, callback));
    };
    SnowplowPlugin.prototype.wrapCallback = function(responseLogger, callback) {
        return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            responseLogger.success("done: " + JSON.stringify(args));
            callback === null || callback === void 0 ? void 0 : callback.apply(void 0, args);
        };
    };
    return SnowplowPlugin;
}(RequestLoggerPlugin);
export {
    SnowplowPlugin
};
export default SnowplowPlugin;