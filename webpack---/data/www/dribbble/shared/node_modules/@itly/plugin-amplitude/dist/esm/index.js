var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || {
            __proto__: []
        }
        instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for (var p in b)
                if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);

        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
/* eslint-disable no-unused-vars, class-methods-use-this */
/* eslint-disable no-restricted-syntax, no-prototype-builtins, no-continue */
import {
    RequestLoggerPlugin
} from '@itly/sdk';
/**
 * Amplitude Browser Plugin for Iteratively SDK
 */
var AmplitudePlugin = /** @class */ function(_super) {
    __extends(AmplitudePlugin, _super);

    function AmplitudePlugin(apiKey, options) {
        var _this = _super.call(this, 'amplitude') || this;
        _this.apiKey = apiKey;
        _this.options = options;
        return _this;
    }
    Object.defineProperty(AmplitudePlugin.prototype, "amplitude", {
        get: function() {
            // eslint-disable-next-line no-restricted-globals
            var s = typeof self === 'object' && self.self === self && self;
            return s && s.amplitude;
        },
        enumerable: false,
        configurable: true
    });
    AmplitudePlugin.prototype.load = function(options) {
        _super.prototype.load.call(this, options);
        if (!this.amplitude) {
            this.loadAmplitude();
            this.amplitude.getInstance().init(this.apiKey, undefined, this.options);
        }
    };
    AmplitudePlugin.prototype.loadAmplitude = function() {
        // Amplitude (https://help.amplitude.com/hc/en-us/articles/115001361248-JavaScript-SDK-Installation)
        // @ts-ignore
        // eslint-disable-next-line
        (function(e, t) {
            var n = e.amplitude || {
                _q: [],
                _iq: {}
            };
            var r = t.createElement("script");
            r.type = "text/javascript";
            r.integrity = "sha384-6k42Gq2nzO4TE/bOyT9n/MShqgegxqSKz3HyjuEFFtDvig3bWyErELSvwcuhYIYF";
            r.crossOrigin = "anonymous";
            r.async = true;
            r.src = "https://cdn.amplitude.com/libs/amplitude-8.8.0-min.gz.js";
            r.onload = function() {
                if (!e.amplitude.runQueuedFunctions) {
                    console.log("[Amplitude] Error: could not load SDK");
                }
            };
            var i = t.getElementsByTagName("script")[0];
            i.parentNode.insertBefore(r, i);

            function s(e, t) {
                e.prototype[t] = function() {
                    this._q.push([t].concat(Array.prototype.slice.call(arguments, 0)));
                    return this;
                };
            }
            var o = function() {
                this._q = [];
                return this;
            };
            var a = ["add", "append", "clearAll", "prepend", "set", "setOnce", "unset", "preInsert", "postInsert", "remove"];
            for (var c = 0; c < a.length; c++) {
                s(o, a[c]);
            }
            n.Identify = o;
            var u = function() {
                this._q = [];
                return this;
            };
            var l = ["setProductId", "setQuantity", "setPrice", "setRevenueType", "setEventProperties"];
            for (var p = 0; p < l.length; p++) {
                s(u, l[p]);
            }
            n.Revenue = u;
            var d = ["init", "logEvent", "logRevenue", "setUserId", "setUserProperties", "setOptOut", "setVersionName", "setDomain", "setDeviceId", "enableTracking", "setGlobalUserProperties", "identify", "clearUserProperties", "setGroup", "logRevenueV2", "regenerateDeviceId", "groupIdentify", "onInit", "logEventWithTimestamp", "logEventWithGroups", "setSessionId", "resetSessionId"];

            function v(e) {
                function t(t) {
                    e[t] = function() {
                        e._q.push([t].concat(Array.prototype.slice.call(arguments, 0)));
                    };
                }
                for (var n = 0; n < d.length; n++) {
                    t(d[n]);
                }
            }
            v(n);
            n.getInstance = function(e) {
                e = (!e || e.length === 0 ? "$default_instance" : e).toLowerCase();
                if (!n._iq.hasOwnProperty(e)) {
                    n._iq[e] = {
                        _q: []
                    };
                    v(n._iq[e]);
                }
                return n._iq[e];
            };
            e.amplitude = n;
        })(window, document);
    };
    AmplitudePlugin.prototype.identify = function(userId, properties, options) {
        if (userId) {
            this.amplitude.getInstance().setUserId(userId);
        }
        if (properties) {
            var identifyObject = new this.amplitude.Identify();
            for (var p in properties) {
                if (!properties.hasOwnProperty(p)) {
                    continue;
                }
                identifyObject.set(p, properties[p]);
            }
            var callback = (options !== null && options !== void 0 ? options : {}).callback;
            var responseLogger = this.logger.logRequest('identify', userId + " " + JSON.stringify(properties));
            this.amplitude.getInstance().identify(identifyObject, this.wrapCallback(responseLogger, callback));
        }
    };
    AmplitudePlugin.prototype.group = function(userId, groupId, properties, options) {
        var _this = this;
        if (!(options && options.groups)) {
            this.logger.warn('Amplitude group requires groups in the AmplitudeGroupOptions.');
            return;
        }
        var identifyObject;
        var wrappedCallback;
        if (properties) {
            identifyObject = new this.amplitude.Identify();
            for (var p in properties) {
                if (!properties.hasOwnProperty(p)) {
                    continue;
                }
                identifyObject.set(p, properties[p]);
            }
            var callback = (options !== null && options !== void 0 ? options : {}).callback;
            var responseLogger = this.logger.logRequest('groupIdentify', userId + " " + JSON.stringify(properties));
            wrappedCallback = this.wrapCallback(responseLogger, callback);
        }
        var _loop_1 = function(groupType) {
            if (!options.groups.hasOwnProperty(groupType)) {
                return "continue";
            }
            var groupName = options.groups[groupType];
            this_1.amplitude.getInstance().setGroup(groupType, groupName);
            if (identifyObject) {
                if (Array.isArray(groupName)) {
                    groupName.forEach(function(groupValue) {
                        _this.amplitude.getInstance().groupIdentify(groupType, groupValue, identifyObject, wrappedCallback);
                    });
                } else {
                    this_1.amplitude.getInstance().groupIdentify(groupType, groupName, identifyObject, wrappedCallback);
                }
            }
        };
        var this_1 = this;
        for (var groupType in options.groups) {
            _loop_1(groupType);
        }
    };
    AmplitudePlugin.prototype.track = function(userId, _a, options) {
        var name = _a.name,
            properties = _a.properties;
        var callback = (options !== null && options !== void 0 ? options : {}).callback;
        var responseLogger = this.logger.logRequest('track', userId + " " + name + " " + JSON.stringify(properties));
        this.amplitude.getInstance().logEvent(name, properties, this.wrapCallback(responseLogger, callback));
    };
    AmplitudePlugin.prototype.reset = function() {
        this.amplitude.getInstance().setUserId(null);
        this.amplitude.getInstance().regenerateDeviceId();
    };
    AmplitudePlugin.prototype.wrapCallback = function(responseLogger, callback) {
        return function(statusCode, responseBody, details) {
            if (statusCode >= 200 && statusCode < 300) {
                responseLogger.success("" + statusCode);
            } else {
                responseLogger.error("unexpected status: " + statusCode + ". " + responseBody + "\n" + JSON.stringify(details));
            }
            callback === null || callback === void 0 ? void 0 : callback(statusCode, responseBody, details);
        };
    };
    return AmplitudePlugin;
}(RequestLoggerPlugin);
export {
    AmplitudePlugin
};
export default AmplitudePlugin;